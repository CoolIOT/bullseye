[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace Bullseye
{
    public class static Targets
    {
        public static string[] DependsOn(params string[] dependencies) { }
        public static TInput[] ForEach<TInput>(params TInput[] inputs) { }
        [System.ObsoleteAttribute("Use RunTargetsAndExit(IEnumerable<string> args) instead. This method will be remo" +
            "ved in version 3.0.0.")]
        public static void RunTargets() { }
        [System.ObsoleteAttribute("Use RunTargetsAndExit(IEnumerable<string> args) instead. This method will be remo" +
            "ved in version 3.0.0.")]
        public static void RunTargets(System.Collections.Generic.IEnumerable<string> args) { }
        public static void RunTargetsAndExit(System.Collections.Generic.IEnumerable<string> args, System.Collections.Generic.IEnumerable<System.Type> exceptionMessageOnly) { }
        public static void RunTargetsAndExit(System.Collections.Generic.IEnumerable<string> args) { }
        public static void RunTargetsAndExit<T>(System.Collections.Generic.IEnumerable<string> args)
            where T : System.Exception { }
        public static void RunTargetsAndExit<T1, T2>(System.Collections.Generic.IEnumerable<string> args)
            where T1 : System.Exception
            where T2 : System.Exception { }
        public static void RunTargetsAndExit<T1, T2, T3>(System.Collections.Generic.IEnumerable<string> args)
            where T1 : System.Exception
            where T2 : System.Exception
            where T3 : System.Exception { }
        public static void RunTargetsAndExit<T1, T2, T3, T4>(System.Collections.Generic.IEnumerable<string> args)
            where T1 : System.Exception
            where T2 : System.Exception
            where T3 : System.Exception
            where T4 : System.Exception { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync(System.Collections.Generic.IEnumerable<string> args, System.Collections.Generic.IEnumerable<System.Type> exceptionMessageOnly) { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync(System.Collections.Generic.IEnumerable<string> args) { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync<T>(System.Collections.Generic.IEnumerable<string> args)
            where T : System.Exception { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync<T1, T2>(System.Collections.Generic.IEnumerable<string> args)
            where T1 : System.Exception
            where T2 : System.Exception { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync<T1, T2, T3>(System.Collections.Generic.IEnumerable<string> args)
            where T1 : System.Exception
            where T2 : System.Exception
            where T3 : System.Exception { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync<T1, T2, T3, T4>(System.Collections.Generic.IEnumerable<string> args)
            where T1 : System.Exception
            where T2 : System.Exception
            where T3 : System.Exception
            where T4 : System.Exception { }
        [System.ObsoleteAttribute("Use RunTargetsAndExitAsync(IEnumerable<string> args) instead. This method will be" +
            " removed in version 3.0.0.")]
        public static System.Threading.Tasks.Task RunTargetsAsync(System.Collections.Generic.IEnumerable<string> args) { }
        [System.ObsoleteAttribute("Use RunTargetsAndExitAsync(IEnumerable<string> args) instead. This method will be" +
            " removed in version 3.0.0.")]
        public static System.Threading.Tasks.Task RunTargetsAsync() { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Func<System.Threading.Tasks.Task> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public static void Target(string name, System.Func<System.Threading.Tasks.Task> action) { }
        public static void Target(string name, System.Action action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Action action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
    }
}