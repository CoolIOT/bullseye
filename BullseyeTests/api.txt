[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace Bullseye
{
    public enum Host
    {
        Unknown = 0,
        Appveyor = 1,
        AzurePipelines = 2,
        GitHubActions = 3,
        GitLabCI = 4,
        Travis = 5,
        TeamCity = 6,
        VisualStudioCode = 7,
    }
    public class InvalidUsageException : System.Exception
    {
        public InvalidUsageException() { }
        public InvalidUsageException(string message) { }
        public InvalidUsageException(string message, System.Exception innerException) { }
    }
    public class OptionDefinition
    {
        public OptionDefinition(string shortName, string longName, string description) { }
        public string Description { get; }
        public string LongName { get; }
        public string ShortName { get; }
    }
    public class Options
    {
        public Options() { }
        public Options(System.Collections.Generic.IEnumerable<System.ValueTuple<string, bool>> values) { }
        public bool Clear { get; set; }
        public bool DryRun { get; set; }
        public Bullseye.Host Host { get; set; }
        public bool ListDependencies { get; set; }
        public bool ListInputs { get; set; }
        public bool ListTargets { get; set; }
        public bool ListTree { get; set; }
        public bool NoColor { get; set; }
        public bool NoExtendedChars { get; set; }
        public bool Parallel { get; set; }
        public bool ShowHelp { get; }
        public bool SkipDependencies { get; set; }
        public System.Collections.Generic.IReadOnlyList<string> UnknownOptions { get; }
        public bool Verbose { get; set; }
        public static System.Collections.Generic.IEnumerable<Bullseye.OptionDefinition> Definitions { get; }
        public static System.ValueTuple<Bullseye.Options, System.Collections.Generic.List<string>> Parse(System.Collections.Generic.IEnumerable<string> args) { }
    }
    public class TargetFailedException : System.Exception
    {
        public TargetFailedException() { }
        public TargetFailedException(string message) { }
        public TargetFailedException(string message, System.Exception innerException) { }
    }
    public class Targets
    {
        public Targets() { }
        public void Add(string name, System.Action action) { }
        public void Add(string name, System.Collections.Generic.IEnumerable<string> dependsOn) { }
        public void Add(string name, System.Func<System.Threading.Tasks.Task> action) { }
        public void Add(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Action action) { }
        public void Add(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Func<System.Threading.Tasks.Task> action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public void Add<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public void RunAndExit(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public void RunAndExit(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunAndExitAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunAndExitAsync(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public void RunWithoutExiting(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public void RunWithoutExiting(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public System.Threading.Tasks.Task RunWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static string[] DependsOn(params string[] dependencies) { }
        public static TInput[] ForEach<TInput>(params TInput[] inputs) { }
        public static void RunTargetsAndExit(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void RunTargetsAndExit(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsAndExitAsync(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void RunTargetsWithoutExiting(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void RunTargetsWithoutExiting(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> args, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static System.Threading.Tasks.Task RunTargetsWithoutExitingAsync(System.Collections.Generic.IEnumerable<string> targets, Bullseye.Options options, System.Func<System.Exception, bool> messageOnly = null, string logPrefix = null) { }
        public static void Target(string name, System.Action action) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn) { }
        public static void Target(string name, System.Func<System.Threading.Tasks.Task> action) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Action action) { }
        public static void Target(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Func<System.Threading.Tasks.Task> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Action<TInput> action) { }
        public static void Target<TInput>(string name, System.Collections.Generic.IEnumerable<string> dependsOn, System.Collections.Generic.IEnumerable<TInput> forEach, System.Func<TInput, System.Threading.Tasks.Task> action) { }
    }
}